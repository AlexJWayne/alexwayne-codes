<canvas id="bg-canvas" class="fixed top-0 h-dvh w-dvw"></canvas>

<script>
  import * as THREE from "three"

  import vert from "./bg-canvas.vert.glsl?raw"
  import frag from "./bg-canvas.frag.glsl?raw"

  const start = setupStartTime()
  const canvas = document.getElementById("bg-canvas") as HTMLCanvasElement
  const three = new THREE.WebGLRenderer({ canvas })
  window.addEventListener("resize", onResize)
  onResize()

  const camera = setupCamera()

  const scene = new THREE.Scene()
  const plane = setupPlane()
  scene.add(plane)

  render()

  function setupStartTime() {
    const startStr = localStorage.getItem("timeStart")
    if (startStr) {
      const start = parseFloat(startStr)
      if (performance.timeOrigin - start < 1000 * 60 * 60 * 24) {
        return start
      }
    }

    let newStart = performance.timeOrigin
    localStorage.setItem("timeStart", newStart.toString())
    return newStart
  }

  function setupCamera() {
    const camera = new THREE.OrthographicCamera(0, 1, 1, 0, 0.1, 1000)
    camera.position.set(0, 0, 1)
    return camera
  }

  function setupPlane() {
    const plane = new THREE.Mesh(
      new THREE.PlaneGeometry(1, 1),
      new THREE.ShaderMaterial({
        uniforms: {
          time: { value: start / 1000 },
          aspect: { value: window.innerWidth / window.innerHeight },
        },
        vertexShader: vert,
        fragmentShader: frag,
      }),
    )
    plane.position.set(0.5, 0.5, 0)
    return plane
  }

  function render(t: number = 0) {
    plane.material.uniforms.time.value =
      (performance.timeOrigin - start + performance.now()) / 1000
    plane.material.uniforms.aspect.value =
      window.innerWidth / window.innerHeight

    three.render(scene, camera)
    requestAnimationFrame(render)
  }

  function onResize() {
    three.setSize(window.innerWidth, window.innerHeight)
  }
</script>
